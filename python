Question 8 -
Using the data from Question 5, write code the analyze the data and answer the following questions Note -

Draw plots to demonstrate the analysis for the following questions and better visualizations
Write code comments wherever required for code understanding
Insights to be drawn -

● Get all the overall ratings for each season and using plots compare the ratings for all the seasons, like season 1 ratings, season 2, and so on.

● Get all the episode names, whose average rating is more than 8 for every season

● Get all the episode names that aired before May 2019

● Get the episode name from each season with the highest and lowest rating

● Get the summary for the most popular ( ratings ) episode in every season

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests

# Make a GET request to the API
response = requests.get(
    "http://api.tvmaze.com/singlesearch/shows?q=westworld&embed=episodes"
)

# Get the JSON data from the response
data = response.json()

# Extract the episodes data
episodes = data["_embedded"]["episodes"]

# Create a list of dictionaries to store each episode's data
episodes_data = []

# Iterate over each episode and extract the required attributes
for episode in episodes:
    episode_data = {
        "id": episode["id"],
        "name": episode["name"],
        "season": episode["season"],
        "number": episode["number"],
        "rating_average": episode["rating"]["average"],
        "airdate": episode["airdate"],
        "summary": episode["summary"],
    }
    episodes_data.append(episode_data)

# Create the DataFrame from the episodes data
episodes_df = pd.DataFrame(episodes_data)

# Plotting the bar chart for ratings comparison
sns.barplot(data=episodes_df, x="season", y="rating_average")
plt.title("Ratings Comparison for Each Season")
plt.xlabel("Season")
plt.ylabel("Average Rating")
plt.show()

# Get all the episode names with an average rating higher than 8 for every season
high_rated_episodes = episodes_df[episodes_df["rating_average"] > 8]
high_rated_episode_names = high_rated_episodes["name"]
print("Episode names with average rating > 8:")
print(high_rated_episode_names.to_string(index=False))

# Get all the episode names that aired before May 2019
episodes_df["airdate"] = pd.to_datetime(episodes_df["airdate"])
before_may_2019 = episodes_df[episodes_df["airdate"] < pd.Timestamp("2019-05-01")]
before_may_2019_names = before_may_2019["name"]
print("Episode names aired before May 2019:")
print(before_may_2019_names.to_string(index=False))

# Get the episode name with the highest and lowest rating for each season
highest_rated_episodes = episodes_df.groupby("season")["rating_average"].idxmax()
lowest_rated_episodes = episodes_df.groupby("season")["rating_average"].idxmin()
highest_rated_episode_names = episodes_df.loc[
    highest_rated_episodes, ["season", "name"]
]
lowest_rated_episode_names = episodes_df.loc[lowest_rated_episodes, ["season", "name"]]
print("Episode with the highest rating for each season:")
print(highest_rated_episode_names.to_string(index=False))
print("Episode with the lowest rating for each season:")
print(lowest_rated_episode_names.to_string(index=False))

# Get the summary for the most popular (highest rated) episode in every season
most_popular_episodes = episodes_df.groupby("season")["rating_average"].idxmax()
most_popular_episode_summaries = episodes_df.loc[
    most_popular_episodes, ["season", "summary"]
]
print("Summary for the most popular episode in each season:")
print(most_popular_episode_summaries.to_string(index=False))

Episode names with average rating > 8:
            Trompe L'Oeil
The Well-Tempered Clavier
       The Bicameral Mind
                  Kiksuya
          Vanishing Point
            The Passenger
Episode names aired before May 2019:
             The Original
                 Chestnut
                The Stray
        Dissonance Theory
              Contrapasso
            The Adversary
            Trompe L'Oeil
              Trace Decay
The Well-Tempered Clavier
       The Bicameral Mind
       Journey Into Night
                  Reunion
          Virtù e Fortuna
 The Riddle of the Sphinx
             Akane No Mai
              Phase Space
             Les Écorchés
                  Kiksuya
          Vanishing Point
            The Passenger
Episode with the highest rating for each season:
 season               name
      1 The Bicameral Mind
      2            Kiksuya
      3       Parce Domine
      4           Zhuangzi
Episode with the lowest rating for each season:
 season         name
      1    The Stray
      2 Akane No Mai
      3  Decoherence
      4 The Auguries
Summary for the most popular episode in each season:
 season                                                                                                                                                                                                                 summary
      1 <p>Delores finds out the truth about William's fate. Meanwhile, Maeve organizes an escape plan, only to discover that someone else is pulling the strings. And Robert plays the final piece in his grand narrative.</p>
      2                                          <p>Another of Westworld's Host revolutionaries is revealed. Meanwhile, Emily finds the Man and convinces the Ghost Nation to hand him over to her to ensure his suffering.</p>
      3                                                                                                                                                       <p>If you're stuck in a loop, try walking in a straight line.</p>
      4                                                                                                                                                                                                    <p>God is bored.</p>
Question 9 -
Write a program to read the data from the following link, perform data analysis and answer the following questions Note -

Write code comments wherever required for code understanding
Link - https://data.wa.gov/api/views/f6w7-q2d2/rows.csv?accessType=DOWNLOAD Insights to be drawn - ● Get all the cars and their types that do not qualify for clean alternative fuel vehicle ● Get all TESLA cars with the model year, and model type made in Bothell City. ● Get all the cars that have an electric range of more than 100, and were made after 2015 ● Draw plots to show the distribution between city and electric vehicle type

data = pd.read_csv("Electric_Vehicle_Population_Data.csv")
# Get all the cars and their types that do not qualify for clean alternative fuel vehicle
Noteligible = data[data["Clean Alternative Fuel Vehicle (CAFV) Eligibility"] == 'Not eligible due to low battery range']
Noteligible.loc[:,["Make","Clean Alternative Fuel Vehicle (CAFV) Eligibility"]]
# Get all TESLA cars with the model year, and model type made in Bothell City
city = data[(data["Make"] == "TESLA") &(data["Model Year"]) & (data["Electric Vehicle Type"])&(data["City"] == "Bothell")] 
city.loc[:,["City","Model Year","Make","Electric Vehicle Type"]]
City	Model Year	Make	Electric Vehicle Type
292	Bothell	2017	TESLA	Battery Electric Vehicle (BEV)
495	Bothell	2021	TESLA	Battery Electric Vehicle (BEV)
503	Bothell	2023	TESLA	Battery Electric Vehicle (BEV)
579	Bothell	2021	TESLA	Battery Electric Vehicle (BEV)
776	Bothell	2023	TESLA	Battery Electric Vehicle (BEV)
...	...	...	...	...
129392	Bothell	2021	TESLA	Battery Electric Vehicle (BEV)
129508	Bothell	2021	TESLA	Battery Electric Vehicle (BEV)
129665	Bothell	2013	TESLA	Battery Electric Vehicle (BEV)
129778	Bothell	2019	TESLA	Battery Electric Vehicle (BEV)
129954	Bothell	2021	TESLA	Battery Electric Vehicle (BEV)
1200 rows × 4 columns

# Get all the cars that have an electric range of more than 100, and were made after2015
el = data[(data["Electric Range"] > 100)& (data["Model Year"] > 2015)]
el.loc[:,["Make","Electric Range","Model Year"]]
Make	Electric Range	Model Year
0	TESLA	238	2018
2	TESLA	220	2019
4	TESLA	210	2017
12	TESLA	308	2020
13	TESLA	322	2020
...	...	...	...
130417	TESLA	291	2020
130428	NISSAN	151	2018
130432	TESLA	291	2020
130436	TESLA	215	2018
130441	TESLA	293	2020
34066 rows × 3 columns

# Draw plots to show the distribution between city and electric vehicle type
ElectricVehicle = data[data["Electric Vehicle Type"] == "Battery Electric Vehicle (BEV)"]
elv =  ElectricVehicle.loc[:,["City","Electric Vehicle Type"]]
import matplotlib.pyplot as plt

# Group the data by City and Electric Vehicle Type and count the occurrences
counts = elv.groupby(['City', 'Electric Vehicle Type']).size().unstack()[:20]

# Create a bar plot
counts.plot(kind='bar', stacked=True)
plt.xlabel('City')
plt.ylabel('Count')
plt.title('Distribution of Electric Vehicle Types in Cities')
plt.legend(title='Electric Vehicle Type')
plt.show()

Question 10 -
Write a program to count the number of verbs, nouns, pronouns, and adjectives in a given particular phrase or paragraph, and return their respective count as a dictionary. Note -

Write code comments wherever required for code
You have to write at least 2 additional test cases in which your program will run successfully and provide an explanation for the same.
dic = { "nouns": "count of nouns", "pronouns": "count of pronouns", "verbs": "count of verbs", "adjectives": "count of adjectives" }

import re

def count_pos_tags(text):
    # Count verbs
    verbs = re.findall(r'\b\w+ing\b|\b\w+ed\b|\b\w+s\b', text)
    verb_count = len(verbs)
    
    # Count nouns
    nouns = re.findall(r'\b\w+s\b|\b\w+[^inged]s\b|\b\w+[^ing]ing\b|\b\w+ed\b', text)
    noun_count = len(nouns)
    
    # Count pronouns
    pronouns = re.findall(r'\b(?:he|she|it|they|we|you|I|me|him|her|us|them)\b', text, re.IGNORECASE)
    pronoun_count = len(pronouns)
    
    # Count adjectives
    adjectives = re.findall(r'\b\w+ful\b|\b\w+ous\b|\b\w+ish\b|\b\w+ive\b', text)
    adjective_count = len(adjectives)
    
    # Create a dictionary with the counts
    pos_counts = {
        'Verbs': verb_count,
        'Nouns': noun_count,
        'Pronouns': pronoun_count,
        'Adjectives': adjective_count
    }
    
    return pos_counts

# Test case 1: Counting POS tags in a phrase
phrase = "The quick brown fox jumps over the lazy dog"
result1 = count_pos_tags(phrase)
print(result1)

# Test case 2: Counting POS tags in a paragraph
paragraph = "The cat is sleeping on the mat. It looks very comfortable. The mat is soft and fluffy."
result2 = count_pos_tags(paragraph)
print(result2)
{'Verbs': 1, 'Nouns': 1, 'Pronouns': 0, 'Adjectives': 0}
{'Verbs': 4, 'Nouns': 4, 'Pronouns': 1, 'Adjectives': 0}
